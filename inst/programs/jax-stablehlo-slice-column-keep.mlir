#loc1 = loc("x")
#loc2 = loc("col_idx")
module @jit_slice_column_keep attributes {jax.uses_shape_polymorphism = false, mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<3x4xf32> loc("x"), %arg1: tensor<i32> loc("col_idx")) -> (tensor<3x1xf32> {jax.result_info = "result"}) {
    %c = stablehlo.constant dense<4> : tensor<i32> loc(#loc)
    %c_0 = stablehlo.constant dense<0> : tensor<i32> loc(#loc)
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc8)
    %1 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc9)
    %2 = stablehlo.compare  LT, %0, %1,  SIGNED : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1> loc(#loc9)
    %3 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc10)
    %4 = stablehlo.add %0, %3 : tensor<1xi32> loc(#loc10)
    %5 = stablehlo.select %2, %4, %0 : tensor<1xi1>, tensor<1xi32> loc(#loc11)
    %6 = stablehlo.broadcast_in_dim %5, dims = [0] : (tensor<1xi32>) -> tensor<1x1xi32> loc(#loc8)
    %7 = "stablehlo.gather"(%arg0, %6) <{dimension_numbers = #stablehlo.gather<offset_dims = [0], collapsed_slice_dims = [1], start_index_map = [1], index_vector_dim = 1>, slice_sizes = array<i64: 3, 1>}> : (tensor<3x4xf32>, tensor<1x1xi32>) -> tensor<3x1xf32> loc(#loc12)
    return %7 : tensor<3x1xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)
#loc3 = loc("<string>":11:9 to :24)
#loc4 = loc("<string>":18:11 to :58)
#loc5 = loc("slice_column_keep"(#loc3))
#loc6 = loc("<module>"(#loc4))
#loc7 = loc(callsite(#loc5 at #loc6))
#loc8 = loc("jit(slice_column_keep)/jit(main)/broadcast_in_dim"(#loc7))
#loc9 = loc("jit(slice_column_keep)/jit(main)/lt"(#loc7))
#loc10 = loc("jit(slice_column_keep)/jit(main)/add"(#loc7))
#loc11 = loc("jit(slice_column_keep)/jit(main)/select_n"(#loc7))
#loc12 = loc("jit(slice_column_keep)/jit(main)/gather"(#loc7))

