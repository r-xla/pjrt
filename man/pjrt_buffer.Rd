% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buffer.R
\name{pjrt_buffer}
\alias{pjrt_buffer}
\alias{pjrt_scalar}
\alias{pjrt_buffer.logical}
\alias{pjrt_buffer.integer}
\alias{pjrt_buffer.double}
\alias{pjrt_buffer.raw}
\alias{pjrt_scalar.logical}
\alias{pjrt_scalar.integer}
\alias{pjrt_scalar.double}
\alias{pjrt_scalar.raw}
\title{Create a PJRT Buffer}
\usage{
pjrt_buffer(data, etype, client = pjrt_client(), ...)

pjrt_scalar(data, etype, client = pjrt_client(), ...)

\method{pjrt_buffer}{logical}(
  data,
  etype = "pred",
  client = pjrt_client(),
  shape = get_dims(data),
  ...
)

\method{pjrt_buffer}{integer}(
  data,
  etype = "i32",
  client = pjrt_client(),
  shape = get_dims(data),
  ...
)

\method{pjrt_buffer}{double}(
  data,
  etype = "f32",
  client = pjrt_client(),
  shape = get_dims(data),
  ...
)

\method{pjrt_buffer}{raw}(data, ..., etype, client = pjrt_client(), shape, row_major)

\method{pjrt_scalar}{logical}(data, etype = "pred", client = pjrt_client(), ...)

\method{pjrt_scalar}{integer}(data, etype = "i32", client = pjrt_client(), ...)

\method{pjrt_scalar}{double}(data, etype = "f32", client = pjrt_client(), ...)

\method{pjrt_scalar}{raw}(data, ..., etype, client = pjrt_client())
}
\arguments{
\item{data}{(any)\cr
Data to convert to a \code{PJRTBuffer}.}

\item{etype}{(\code{character(1)})\cr
The type of the buffer.
Currently supported types are:
\itemize{
\item \code{"pred"}: predicate (i.e. a boolean)
\item \code{"{s,u}{8,16,32,64}"}: (Un)signed integer (for \code{integer} data).
\item \code{"f{32,64}"}: Floating point (for \code{double} or \code{integer} data).
}}

\item{client}{(\code{PJRTClient} | \code{character(1)})\cr
A PJRT client object or the name of the platform to use ("cpu", "cuda", ...),
from which the client will be created.}

\item{...}{(any)\cr
Additional arguments.}

\item{shape}{(\code{integer()})\cr
The dimensions of the buffer.
The default is to infer them from the data.}

\item{row_major}{(logical(1))\cr
Whether to read the data in row-major format or column-major format.
R uses column-major format.}
}
\value{
\code{PJRTBuffer}
}
\description{
Create a PJRT Buffer from an R object.
Any numeric PJRT buffer is an array and 0-dimensional arrays are used as scalars.
\code{\link{pjrt_buffer}} will create a array with dimensions \code{(1)} for a vector of length 1, while
\code{\link{pjrt_scalar}} will create a 0-dimensional array for an R vector of length 1.
}
\details{
R does not have 0-dimensional arrays, hence we need the extra \code{pjrt_scalar} function.
}
\section{Extractors}{

\itemize{
\item \code{\link[=device]{device()}} for the device of the buffer.
\item \code{\link[=etype]{etype()}} for the element type of the buffer.
\item \code{\link[=shape]{shape()}} for the shape of the buffer.
}
}

\section{Converters}{

\itemize{
\item \code{\link[=as_array]{as_array()}} for an array.
\item \code{\link[=as_raw]{as_raw()}} for a raw vector.
}
}

\section{Buffer Overflow}{

No checks are performed when converting an R object to a PJRT buffer.
It is in the caller's responsibility to ensure that the data fits the selected element type.
}

