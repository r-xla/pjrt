% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buffer.R
\name{pjrt_buffer}
\alias{pjrt_buffer}
\alias{pjrt_scalar}
\alias{pjrt_empty}
\title{Create a PJRT Buffer}
\usage{
pjrt_buffer(data, dtype = NULL, client = NULL, shape = NULL, ...)

pjrt_scalar(data, dtype = NULL, client = NULL, ...)

pjrt_empty(dtype, shape, client = NULL)
}
\arguments{
\item{data}{(any)\cr
Data to convert to a \code{PJRTBuffer}.}

\item{dtype}{(\code{NULL} | \code{character(1)})\cr
The type of the buffer.
Currently supported types are:
\itemize{
\item \code{"pred"}: predicate (i.e. a boolean)
\item \code{"{s,u}{8,16,32,64}"}: Signed and unsigned integer (for \code{integer} data).
\item \code{"f{32,64}"}: Floating point (for \code{double} or \code{integer} data).
}}

\item{client}{(\code{PJRTClient} | \code{character(1)})\cr
A PJRT client object or the name of the platform to use ("cpu", "cuda", ...),
from which the client will be created.}

\item{shape}{(\code{integer()})\cr
The dimensions of the buffer.
The default is to infer them from the data if possible.}

\item{...}{(any)\cr
Additional arguments.
For \code{raw} types, this includes:
\itemize{
\item \code{row_major}: Whether to read the data in row-major format or column-major format.
R uses column-major format.
}}
}
\value{
\code{PJRTBuffer}
}
\description{
Create a PJRT Buffer from an R object.
Any numeric PJRT buffer is an array and 0-dimensional arrays are used as scalars.
\code{\link{pjrt_buffer}} will create a array with dimensions \code{(1)} for a vector of length 1, while
\code{\link{pjrt_scalar}} will create a 0-dimensional array for an R vector of length 1.

To create an empty buffer (at least one dimension must be 0), use \code{\link{pjrt_empty}}.

\strong{Important}:
No checks are performed when creating the buffer, so you need to ensure that the data fits
the selected element type (e.g., to prevent buffer overflow) and that no NA values are present.
}
\section{Extractors}{

\itemize{
\item \code{\link[=platform]{platform()}} -> \code{character(1)}: for the platform name of the buffer (\code{"cpu"}, \code{"cuda"}, ...).
\item \code{\link[=device]{device()}} -> \code{PJRTDevice}: for the device of the buffer (also includes device number)
\item \code{\link[=elt_type]{elt_type()}} -> \code{PJRTElementType}: for the element type of the buffer.
\item \code{\link[=shape]{shape()}} -> \code{integer()}: for the shape of the buffer.
}
}

\section{Converters}{

\itemize{
\item \code{\link[=as_array]{as_array()}} -> \code{array} | \code{vector}: for converting back to R (\code{vector} is only used for shape \code{integer()}).
\item \code{\link[=as_raw]{as_raw()}} -> \code{raw} for a raw vector.
}
}

\section{Reading and Writing}{

\itemize{
\item \code{\link[safetensors:safe_save_file]{safetensors::safe_save_file}} for writing to a safetensors file.
\item \code{\link[safetensors:safe_load_file]{safetensors::safe_load_file}} for reading from a safetensors file.
}
}

\section{Scalars}{

When calling this function on a vector of length 1, the resulting shape is \code{1L}.
To create a 0-dimensional buffer, use \code{pjrt_scalar} where the resulting shape is \code{integer()}.
}

