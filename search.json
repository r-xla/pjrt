[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 pjrt authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Falbel. Author, maintainer. Sebastian Fischer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falbel D, Fischer S (2025). pjrt: R Interface PJRT. R package version 0.0.0.9000, https://r-xla.github.io/pjrt/.","code":"@Manual{,   title = {pjrt: R Interface to PJRT},   author = {Daniel Falbel and Sebastian Fischer},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://r-xla.github.io/pjrt/}, }"},{"path":"/index.html","id":"pjrt","dir":"","previous_headings":"","what":"R Interface to PJRT","title":"R Interface to PJRT","text":"{pjrt} package provides R interface PJRT (Pretty much Just another RunTime), allows run XLA stableHLO programs various hardware backends. programs framework hardware agnostic, means can generated ML frameworks jax, run PJRT specified backend (CPU, GPU, etc.). low-level R interface create stableHLO programs, see stablehlo package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to PJRT","text":"","code":"pak::pak(\"r-xla/pjrt\")"},{"path":"/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"R Interface to PJRT","text":", create run stableHLO program adds two f32 tensors shape (2, 2).","code":"library(pjrt) src <- r\"( func.func @main(   %x: tensor<2x2xf32>,   %y: tensor<2x2xf32> ) -> tensor<2x2xf32> {   %0 = \"stablehlo.add\"(%x, %y) : (tensor<2x2xf32>, tensor<2x2xf32>) -> tensor<2x2xf32>   \"func.return\"(%0): (tensor<2x2xf32>) -> () } )\" program <- pjrt_program(src, format = \"mlir\") program #> PJRTProgram(format=mlir, code_size=221) #>  #> func.func @main( #>   %x: tensor<2x2xf32>, #>   %y: tensor<2x2xf32> #> ) -> tensor<2x2xf32> { #> ... executable <- pjrt_compile(program, client = \"cpu\")  x <- pjrt_buffer(as.double(1:4), shape = c(2, 2), dtype = \"f32\") x #> PJRTBuffer<f32: 2x2>  #>  1.0000 3.0000 #>  2.0000 4.0000 y <- pjrt_buffer(as.double(5:8), shape = c(2, 2), dtype = \"f32\") y #> PJRTBuffer<f32: 2x2>  #>  5.0000 7.0000 #>  6.0000 8.0000  pjrt_execute(executable, x, y) #> PJRTBuffer<f32: 2x2>  #>   6.0000 10.0000 #>   8.0000 12.0000"},{"path":"/index.html","id":"main-features","dir":"","previous_headings":"","what":"Main Features","title":"R Interface to PJRT","text":"Compile stableHLO programs hardware-specific executables. Provide runtime execute compiled programs. Convert buffers R arrays vectors. Read write buffers using safetensors format.","code":""},{"path":"/index.html","id":"platform-support","dir":"","previous_headings":"","what":"Platform Support","title":"R Interface to PJRT","text":"✅ CPU backend fully supported. ✅ CUDA (NVIDIA GPU) backend fully supported. ✅ CPU backend fully supported. ⚠️ GPU supported via Windows Subsystem Linux (WSL2). ✅ CPU backend supported. ⚠️ Metal (Apple GPU) backend available fully functional.","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"R Interface to PJRT","text":"development package supported MaRDI. Without OpenXLA, none possible. design {pjrt} package inspired gopjrt implementation. PJRT C API. PJRT C API FFI Extension. Various protobuf files, see ./tools/copy-proto.R ones. Plugin implementations CPU CUDA (using builds zml/pjrt-artifacts). Metal, using plugin implementation jax-metal.","code":""},{"path":"/reference/as.character.PJRTElementType.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert PJRTElementType to string — as.character.PJRTElementType","title":"Convert PJRTElementType to string — as.character.PJRTElementType","text":"Get (lowercase) string representation PJRT element type","code":""},{"path":"/reference/as.character.PJRTElementType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert PJRTElementType to string — as.character.PJRTElementType","text":"","code":"# S3 method for class 'PJRTElementType' as.character(x, ...)"},{"path":"/reference/as.character.PJRTElementType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert PJRTElementType to string — as.character.PJRTElementType","text":"x PJRT element type object. ... Additional arguments (unused).","code":""},{"path":"/reference/as.character.PJRTElementType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert PJRTElementType to string — as.character.PJRTElementType","text":"string representation element type.","code":""},{"path":"/reference/as_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a PJRT Buffer to an R object. — as_array","title":"Convert a PJRT Buffer to an R object. — as_array","text":"Copy PJRTBuffer R object. 0-dimensional PJRT buffers, R object vector length 1 otherwise array.","code":""},{"path":"/reference/as_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a PJRT Buffer to an R object. — as_array","text":"","code":"as_array(buffer, client = pjrt_client())"},{"path":"/reference/as_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a PJRT Buffer to an R object. — as_array","text":"buffer (PJRTBuffer) PJRT buffer object. client (PJRTClient | character(1)) PJRT client object name platform use (\"cpu\", \"cuda\", ...), client created.","code":""},{"path":"/reference/as_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a PJRT Buffer to an R object. — as_array","text":"Moving buffer host requires : Copy data PJRT device CPU. Transpose data, PJRT returns row-major order R uses column-major order.","code":""},{"path":"/reference/as_pjrt_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to PJRT Client — as_pjrt_client","title":"Convert to PJRT Client — as_pjrt_client","text":"Convert platform name PJRT client verify object already client.","code":""},{"path":"/reference/as_pjrt_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to PJRT Client — as_pjrt_client","text":"","code":"as_pjrt_client(x)"},{"path":"/reference/as_pjrt_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to PJRT Client — as_pjrt_client","text":"x (PJRTClient | character(1)) Either PJRT client object platform name (e.g., \"cpu\", \"cuda\", \"metal\").","code":""},{"path":"/reference/as_pjrt_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to PJRT Client — as_pjrt_client","text":"PJRTClient","code":""},{"path":"/reference/as_pjrt_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to PJRT Plugin — as_pjrt_plugin","title":"Convert to PJRT Plugin — as_pjrt_plugin","text":"Convert platform name PJRT plugin verify object already plugin.","code":""},{"path":"/reference/as_pjrt_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to PJRT Plugin — as_pjrt_plugin","text":"","code":"as_pjrt_plugin(x)"},{"path":"/reference/as_pjrt_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to PJRT Plugin — as_pjrt_plugin","text":"x () Object convert PJRT plugin. Currently supports PJRTPlugin character(1).","code":""},{"path":"/reference/as_pjrt_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to PJRT Plugin — as_pjrt_plugin","text":"PJRTPlugin","code":""},{"path":"/reference/as_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a PJRT Buffer to a raw R vector. — as_raw","title":"Convert a PJRT Buffer to a raw R vector. — as_raw","text":"Copy PJRTBuffer raw R vector containing buffer data bytes. shape information lost.","code":""},{"path":"/reference/as_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a PJRT Buffer to a raw R vector. — as_raw","text":"","code":"as_raw(buffer, client = pjrt_client(), row_major)"},{"path":"/reference/as_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a PJRT Buffer to a raw R vector. — as_raw","text":"buffer (PJRTBuffer) PJRT buffer object. client (PJRTClient | character(1)) PJRT client object name platform use (\"cpu\", \"cuda\", ...), client created. row_major (logical(1)) Whether return data row-major format (TRUE) column-major format (FALSE). R uses column-major format.","code":""},{"path":"/reference/as_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a PJRT Buffer to a raw R vector. — as_raw","text":"raw()","code":""},{"path":"/reference/device.html","id":null,"dir":"Reference","previous_headings":"","what":"Device of a PJRTBuffer — device","title":"Device of a PJRTBuffer — device","text":"Get device PJRTBuffer.","code":""},{"path":"/reference/device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Device of a PJRTBuffer — device","text":"","code":"device(x)"},{"path":"/reference/device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Device of a PJRTBuffer — device","text":"x () Object get PJRTDevice.","code":""},{"path":"/reference/device.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Device of a PJRTBuffer — device","text":"PJRTDevice","code":""},{"path":"/reference/dtype.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Type of Buffer — dtype","title":"Data Type of Buffer — dtype","text":"Data Type Buffer","code":""},{"path":"/reference/dtype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Type of Buffer — dtype","text":"","code":"dtype(buffer)"},{"path":"/reference/dtype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Type of Buffer — dtype","text":"buffer (PJRTBuffer) Buffer.","code":""},{"path":"/reference/dtype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Type of Buffer — dtype","text":"PJRT element type object.","code":""},{"path":"/reference/pjrt_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PJRT Buffer — pjrt_buffer","title":"Create a PJRT Buffer — pjrt_buffer","text":"Create PJRT Buffer R object. numeric PJRT buffer array 0-dimensional arrays used scalars. pjrt_buffer create array dimensions (1) vector length 1, pjrt_scalar create 0-dimensional array R vector length 1. Important: checks performed creating buffer, need ensure data fits selected element type (e.g., prevent buffer overflow) NA values present.","code":""},{"path":"/reference/pjrt_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PJRT Buffer — pjrt_buffer","text":"","code":"pjrt_buffer(data, dtype, client = pjrt_client(), ...)  pjrt_scalar(data, dtype, client = pjrt_client(), ...)  # S3 method for class 'logical' pjrt_buffer(   data,   dtype = \"pred\",   client = pjrt_client(),   shape = get_dims(data),   ... )  # S3 method for class 'integer' pjrt_buffer(   data,   dtype = \"i32\",   client = pjrt_client(),   shape = get_dims(data),   ... )  # S3 method for class 'double' pjrt_buffer(   data,   dtype = \"f32\",   client = pjrt_client(),   shape = get_dims(data),   ... )  # S3 method for class 'raw' pjrt_buffer(data, ..., dtype, client = pjrt_client(), shape, row_major)  # S3 method for class 'logical' pjrt_scalar(data, dtype = \"pred\", client = pjrt_client(), ...)  # S3 method for class 'integer' pjrt_scalar(data, dtype = \"i32\", client = pjrt_client(), ...)  # S3 method for class 'double' pjrt_scalar(data, dtype = \"f32\", client = pjrt_client(), ...)  # S3 method for class 'raw' pjrt_scalar(data, ..., dtype, client = pjrt_client())"},{"path":"/reference/pjrt_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PJRT Buffer — pjrt_buffer","text":"data () Data convert PJRTBuffer. dtype (character(1)) type buffer. Currently supported types : \"pred\": predicate (.e. boolean) \"{s,u}{8,16,32,64}\": (Un)signed integer (integer data). \"f{32,64}\": Floating point (double integer data). client (PJRTClient | character(1)) PJRT client object name platform use (\"cpu\", \"cuda\", ...), client created. ... () Additional arguments. shape (integer()) dimensions buffer. default infer data. row_major (logical(1)) Whether read data row-major format column-major format. R uses column-major format.","code":""},{"path":"/reference/pjrt_buffer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PJRT Buffer — pjrt_buffer","text":"PJRTBuffer","code":""},{"path":"/reference/pjrt_buffer.html","id":"extractors","dir":"Reference","previous_headings":"","what":"Extractors","title":"Create a PJRT Buffer — pjrt_buffer","text":"device() device buffer. dtype() element type buffer. shape() shape buffer.","code":""},{"path":"/reference/pjrt_buffer.html","id":"converters","dir":"Reference","previous_headings":"","what":"Converters","title":"Create a PJRT Buffer — pjrt_buffer","text":"as_array() array. as_raw() raw vector.","code":""},{"path":"/reference/pjrt_buffer.html","id":"scalars","dir":"Reference","previous_headings":"","what":"Scalars","title":"Create a PJRT Buffer — pjrt_buffer","text":"calling function vector length 1, resulting shape 1L. create 0-dimensional buffer, use pjrt_scalar resulting shape integer().","code":""},{"path":"/reference/pjrt_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Client — pjrt_client","title":"Create a Client — pjrt_client","text":"Create PJRT client specific device.","code":""},{"path":"/reference/pjrt_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Client — pjrt_client","text":"","code":"pjrt_client(platform = NULL)"},{"path":"/reference/pjrt_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Client — pjrt_client","text":"platform (character(1) | NULL) Platform name (e.g., \"cpu\", \"cuda\", \"metal\"). NULL, use PJRT_PLATFORM environment variable default \"cpu\".","code":""},{"path":"/reference/pjrt_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Client — pjrt_client","text":"PJRTClient","code":""},{"path":"/reference/pjrt_client.html","id":"extractors","dir":"Reference","previous_headings":"","what":"Extractors","title":"Create a Client — pjrt_client","text":"platform_name() character(1) representation platform.","code":""},{"path":"/reference/pjrt_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Client — pjrt_client","text":"","code":"pjrt_client(\"cpu\")"},{"path":"/reference/pjrt_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a Program — pjrt_compile","title":"Compile a Program — pjrt_compile","text":"Compile PJRTProgram program PJRTExecutable.","code":""},{"path":"/reference/pjrt_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a Program — pjrt_compile","text":"","code":"pjrt_compile(   program,   compile_options = new_compile_options(),   client = pjrt_client() )"},{"path":"/reference/pjrt_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a Program — pjrt_compile","text":"program (character(1)) program compile. compile_options (PJRTCompileOptions) Compile options. client (PJRTClient | character(1)) PJRT client object name platform use (\"cpu\", \"cuda\", ...), client created.","code":""},{"path":"/reference/pjrt_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a Program — pjrt_compile","text":"PJRTExecutable","code":""},{"path":"/reference/pjrt_execute.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a PJRT program — pjrt_execute","title":"Execute a PJRT program — pjrt_execute","text":"Execute PJRT program given inputs execution options. Important: Arguments passed position names ignored.","code":""},{"path":"/reference/pjrt_execute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a PJRT program — pjrt_execute","text":"","code":"pjrt_execute(executable, ..., execution_options = NULL)"},{"path":"/reference/pjrt_execute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a PJRT program — pjrt_execute","text":"executable (PJRTLoadedExecutable) PJRT program. ... (PJRTBuffer) Inputs program. Named ignored arguments passed order. execution_options (PJRTExecuteOptions) Optional execution options configuring buffer donation settings.","code":""},{"path":"/reference/pjrt_execute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a PJRT program — pjrt_execute","text":"PJRTBuffer | list PJRTBuffers","code":""},{"path":"/reference/pjrt_execution_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Execution Options — pjrt_execution_options","title":"Create Execution Options — pjrt_execution_options","text":"Create execution options configuring PJRT program executed, including buffer donation settings. Important: enough mark buffer donatable (donatable) runtime. program also needs specify compile-time via input-output aliasing (stableHLO attribute tf.aliasing_output).","code":""},{"path":"/reference/pjrt_execution_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Execution Options — pjrt_execution_options","text":"","code":"pjrt_execution_options(non_donatable_input_indices = integer(), launch_id = 0L)"},{"path":"/reference/pjrt_execution_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Execution Options — pjrt_execution_options","text":"non_donatable_input_indices (integer()) vector input buffer indices donated execution. Buffer donation allows runtime reuse input buffers outputs possible, can improve performance. However, input buffer referenced multiple times needs preserved, marked non-donatable. launch_id (integer(1)) optional launch identifier multi-device executions. can used detect scheduling errors multi-host programs.","code":""},{"path":"/reference/pjrt_execution_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Execution Options — pjrt_execution_options","text":"PJRTExecuteOptions","code":""},{"path":"/reference/pjrt_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create PJRT Plugin — pjrt_plugin","title":"Create PJRT Plugin — pjrt_plugin","text":"Create PJRT plugin specific platform.","code":""},{"path":"/reference/pjrt_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create PJRT Plugin — pjrt_plugin","text":"","code":"pjrt_plugin(platform)"},{"path":"/reference/pjrt_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create PJRT Plugin — pjrt_plugin","text":"platform (character(1)) Platform name (e.g., \"cpu\", \"cuda\", \"metal\").","code":""},{"path":"/reference/pjrt_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create PJRT Plugin — pjrt_plugin","text":"PJRTPlugin","code":""},{"path":"/reference/pjrt_plugin.html","id":"extractors","dir":"Reference","previous_headings":"","what":"Extractors","title":"Create PJRT Plugin — pjrt_plugin","text":"plugin_attributes() named list() attributes.","code":""},{"path":"/reference/pjrt_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PJRTProgram — pjrt_program","title":"Create a PJRTProgram — pjrt_program","text":"Create program string file path.","code":""},{"path":"/reference/pjrt_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PJRTProgram — pjrt_program","text":"","code":"pjrt_program(src = NULL, path = NULL, format = c(\"mlir\", \"hlo\"))"},{"path":"/reference/pjrt_program.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PJRTProgram — pjrt_program","text":"src (character(1)) Source code. path (character(1)) Path program file. format (character(1)) One \"mlir\" \"hlo\".","code":""},{"path":"/reference/pjrt_program.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PJRTProgram — pjrt_program","text":"PJRTProgram","code":""},{"path":"/reference/platform_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the platform name of a PJRT client — platform_name","title":"Get the platform name of a PJRT client — platform_name","text":"Get platform name PJRT client","code":""},{"path":"/reference/platform_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the platform name of a PJRT client — platform_name","text":"","code":"platform_name(client = pjrt_client())"},{"path":"/reference/platform_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the platform name of a PJRT client — platform_name","text":"client PJRT client object.","code":""},{"path":"/reference/platform_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the platform name of a PJRT client — platform_name","text":"string representing platform name.","code":""},{"path":"/reference/plugin_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Plugin Attributes — plugin_attributes","title":"Get Plugin Attributes — plugin_attributes","text":"Get attributes PJRT plugin. commonly includes: xla_version stablehlo_current_version stablehlo_minimum_version implementation depends plugin.","code":""},{"path":"/reference/plugin_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Plugin Attributes — plugin_attributes","text":"","code":"plugin_attributes(plugin)"},{"path":"/reference/plugin_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Plugin Attributes — plugin_attributes","text":"plugin (PJRTPlugin | character(1)) plugin (platform name) get attributes .","code":""},{"path":"/reference/plugin_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Plugin Attributes — plugin_attributes","text":"named list()","code":""},{"path":"/reference/plugin_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Plugin Attributes — plugin_attributes","text":"","code":"plugin_attributes(\"cpu\") #> $xla_version #> [1] 2 #>  #> $stablehlo_current_version #> [1]  1 12  1 #>  #> $stablehlo_minimum_version #> [1] 0 9 0 #>"},{"path":"/reference/print.PJRTBuffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a PJRT Buffer — print.PJRTBuffer","title":"Print a PJRT Buffer — print.PJRTBuffer","text":"Print PJRTBuffer.","code":""},{"path":"/reference/print.PJRTBuffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a PJRT Buffer — print.PJRTBuffer","text":"","code":"# S3 method for class 'PJRTBuffer' print(   x,   max_rows = getOption(\"pjrt.print_max_rows\", 30L),   max_width = getOption(\"pjrt.print_max_width\", 85L),   max_rows_slice = getOption(\"pjrt.print_max_rows_slice\", max_rows),   header = TRUE,   ... )"},{"path":"/reference/print.PJRTBuffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a PJRT Buffer — print.PJRTBuffer","text":"x (PJRTBuffer) buffer. max_rows (integer(1)) maximum number rows print, excluding header footer. max_width (integer(1)) maximum width (characters) printed buffer. Set negative values limit. Note small values, actual printed width might slightly smaller least one column printed. Also, limit affects printed rows containing actual data, rows might exceed width. max_rows_slice (integer(1)) maximum number rows print slice. header (logical(1)) Whether print header. ... Additional arguments (unused).","code":""},{"path":"/reference/shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Shape — shape","title":"Shape — shape","text":"Get shape object. can implement generic instead dim() object can also singular shapes (integer()), generally risky dim().","code":""},{"path":"/reference/shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shape — shape","text":"","code":"shape(x)"},{"path":"/reference/shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shape — shape","text":"x () Object.","code":""},{"path":"/reference/shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shape — shape","text":"integer()","code":""}]
