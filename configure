# Anticonf (tm) script by Jeroen Ooms (2022)
# This script will query 'pkg-config' for the required cflags and ldflags.
# If pkg-config is unavailable or does not find the library, try setting
# INCLUDE_DIR and LIB_DIR manually via e.g:
# R CMD INSTALL --configure-vars='INCLUDE_DIR=/.../include LIB_DIR=/.../lib'

# Library settings
PKG_CONFIG_NAME="protobuf"
PKG_DEB_NAME="libprotobuf-dev"
PKG_RPM_NAME="protobuf-devel"
PKG_BREW_NAME="protobuf"
PKG_TEST_HEADER="<google/protobuf/message.h>"
PKG_LIBS="-lprotobuf"
PKG_CFLAGS=""

# Use pkg-config if available (except for on CRAN)
if [ `command -v pkg-config` ] && [ ! -d "/Volumes/SSD-Data/Builds" ]; then
  PKGCONFIG_CFLAGS=`pkg-config --cflags --silence-errors ${PKG_CONFIG_NAME}`
  PKGCONFIG_LIBS=`pkg-config --libs ${PKG_CONFIG_NAME}`
  PKGCONFIG_MODVERSION=`pkg-config --modversion --silence-errors ${PKG_CONFIG_NAME}`
fi

# Note that cflags may be empty in case of success
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
elif [ "$PKGCONFIG_CFLAGS" ] || [ "$PKGCONFIG_LIBS" ]; then
  echo "Found pkg-config cflags and libs!"
  PKG_CFLAGS=${PKGCONFIG_CFLAGS}
  PKG_LIBS=${PKGCONFIG_LIBS}
elif [ `uname` = "Darwin" ]; then
  test ! "$CI" && brew --version 2>/dev/null
  if [ $? -eq 0 ]; then
    BREWDIR=`brew --prefix`
    PATH="$BREWDIR/bin:$PATH"
    PKG_CFLAGS="-I$BREWDIR/include"
    PKG_LIBS="-L$BREWDIR/lib $PKG_LIBS"
  else
    curl -sfL "https://autobrew.github.io/scripts/protobuf" > autobrew
    . ./autobrew
    PKG_LIBS="$PKG_LIBS -Wl,-dead_strip -ffunction-sections -fdata-sections"
  fi
fi

# For debugging
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "Using PKG_LIBS=$PKG_LIBS"

# Customize the error
if [ $? -ne 0 ]; then
  echo "------------------------------[ ANTICONF ]-----------------------------"
  echo "Configuration failed to find $PKG_CONFIG_NAME. Try installing:"
  echo " * deb: $PKG_DEB_NAME (Debian, Ubuntu, etc)"
  echo " * rpm: $PKG_RPM_NAME (Fedora, EPEL)"
  echo " * brew: $PKG_BREW_NAME (OSX)"
  echo "If $PKG_CONFIG_NAME is already installed, check that 'pkg-config' is in your"
  echo "PATH and PKG_CONFIG_PATH contains a $PKG_CONFIG_NAME.pc file. If pkg-config"
  echo "is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "----------------------------[ ERROR MESSAGE ]----------------------------"
  cat configure.log
  echo "------------------------------------------------------------------------"
  exit 1
fi

# Fix for deprecated declarations
if pkg-config ${PKG_CONFIG_NAME} --atleast-version 3.6; then
PKG_CFLAGS="$PKG_CFLAGS -DUSENEWAPI"
fi

# Look for 'protoc' compiler
if [ `command -v protoc` ]; then
  PROTOC_VERSION=`protoc --version`
  echo "Using ${PROTOC_VERSION} from `command -v protoc`"
else
  echo "Failed to run protoc."
  echo "Please install the 'protobuf-compiler' package for your system."
  exit 1
fi

# Generate C++ source files from .proto definitions
cd src;
mkdir -p proto;
protoc -I "../inst/proto" --cpp_out="proto" --experimental_allow_proto3_optional $(find ../inst/proto -name "*.proto");

# copied from protolite:
# Suppress wanrings about pragmas in the autogenerated protobuf headers.
# Uwe + BDR have said this is OK and there is nothing we can do about this.
find ./ -type f -name "*.pb.h" -exec sed -i.bak "s@^[[:space:]]*#pragma@/*nowarn*/#pragma@g" "{}" \;
rm -f *.bak

PB_SRC=$(echo $(find proto -type f -name "*.pb.cc" -print))
CPP_SRC=$(echo $(find *.cpp -print))
CRC_SRC=$(echo $(find . -type f -name "*.c" -print))

sed -e "s|@pbsrc@|$PB_SRC|" -e "s|@cppsrc@|$CPP_SRC|" -e "s|@csrc@|$CRC_SRC|" \
    -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" -e "s|CXX11|${CXX_STD}|" \
    Makevars.in > Makevars

exit 0;